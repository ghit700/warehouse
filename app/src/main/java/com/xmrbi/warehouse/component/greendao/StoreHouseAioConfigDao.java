package com.xmrbi.warehouse.component.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xmrbi.warehouse.data.entity.main.StoreHouseAioConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE_HOUSE_AIO_CONFIG".
*/
public class StoreHouseAioConfigDao extends AbstractDao<StoreHouseAioConfig, Long> {

    public static final String TABLENAME = "STORE_HOUSE_AIO_CONFIG";

    /**
     * Properties of entity StoreHouseAioConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StoreHouseId = new Property(1, Long.class, "storeHouseId", false, "STORE_HOUSE_ID");
        public final static Property StoreHouseName = new Property(2, String.class, "storeHouseName", false, "STORE_HOUSE_NAME");
        public final static Property LesseeId = new Property(3, Long.class, "lesseeId", false, "LESSEE_ID");
        public final static Property EntranceOpen = new Property(4, Integer.class, "entranceOpen", false, "ENTRANCE_OPEN");
        public final static Property EntranceClose = new Property(5, Integer.class, "entranceClose", false, "ENTRANCE_CLOSE");
        public final static Property FingerprintAddress = new Property(6, String.class, "fingerprintAddress", false, "FINGERPRINT_ADDRESS");
        public final static Property VcrIp = new Property(7, String.class, "vcrIp", false, "VCR_IP");
        public final static Property VcrPort = new Property(8, Integer.class, "vcrPort", false, "VCR_PORT");
        public final static Property VcrUsername = new Property(9, String.class, "vcrUsername", false, "VCR_USERNAME");
        public final static Property VcrPassword = new Property(10, String.class, "vcrPassword", false, "VCR_PASSWORD");
        public final static Property VcrPrimaryAddress = new Property(11, String.class, "vcrPrimaryAddress", false, "VCR_PRIMARY_ADDRESS");
        public final static Property RfidIp = new Property(12, String.class, "rfidIp", false, "RFID_IP");
        public final static Property RfidPort = new Property(13, Integer.class, "rfidPort", false, "RFID_PORT");
        public final static Property PrintSerialName = new Property(14, String.class, "printSerialName", false, "PRINT_SERIAL_NAME");
        public final static Property PrintBautRate = new Property(15, String.class, "printBautRate", false, "PRINT_BAUT_RATE");
        public final static Property LightSerialName = new Property(16, String.class, "lightSerialName", false, "LIGHT_SERIAL_NAME");
        public final static Property LightBautRate = new Property(17, String.class, "lightBautRate", false, "LIGHT_BAUT_RATE");
        public final static Property EntranceSerialName = new Property(18, String.class, "entranceSerialName", false, "ENTRANCE_SERIAL_NAME");
        public final static Property EntranceBautRate = new Property(19, String.class, "entranceBautRate", false, "ENTRANCE_BAUT_RATE");
    }


    public StoreHouseAioConfigDao(DaoConfig config) {
        super(config);
    }
    
    public StoreHouseAioConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE_HOUSE_AIO_CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STORE_HOUSE_ID\" INTEGER," + // 1: storeHouseId
                "\"STORE_HOUSE_NAME\" TEXT," + // 2: storeHouseName
                "\"LESSEE_ID\" INTEGER," + // 3: lesseeId
                "\"ENTRANCE_OPEN\" INTEGER," + // 4: entranceOpen
                "\"ENTRANCE_CLOSE\" INTEGER," + // 5: entranceClose
                "\"FINGERPRINT_ADDRESS\" TEXT," + // 6: fingerprintAddress
                "\"VCR_IP\" TEXT," + // 7: vcrIp
                "\"VCR_PORT\" INTEGER," + // 8: vcrPort
                "\"VCR_USERNAME\" TEXT," + // 9: vcrUsername
                "\"VCR_PASSWORD\" TEXT," + // 10: vcrPassword
                "\"VCR_PRIMARY_ADDRESS\" TEXT," + // 11: vcrPrimaryAddress
                "\"RFID_IP\" TEXT," + // 12: rfidIp
                "\"RFID_PORT\" INTEGER," + // 13: rfidPort
                "\"PRINT_SERIAL_NAME\" TEXT," + // 14: printSerialName
                "\"PRINT_BAUT_RATE\" TEXT," + // 15: printBautRate
                "\"LIGHT_SERIAL_NAME\" TEXT," + // 16: lightSerialName
                "\"LIGHT_BAUT_RATE\" TEXT," + // 17: lightBautRate
                "\"ENTRANCE_SERIAL_NAME\" TEXT," + // 18: entranceSerialName
                "\"ENTRANCE_BAUT_RATE\" TEXT);"); // 19: entranceBautRate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE_HOUSE_AIO_CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoreHouseAioConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long storeHouseId = entity.getStoreHouseId();
        if (storeHouseId != null) {
            stmt.bindLong(2, storeHouseId);
        }
 
        String storeHouseName = entity.getStoreHouseName();
        if (storeHouseName != null) {
            stmt.bindString(3, storeHouseName);
        }
 
        Long lesseeId = entity.getLesseeId();
        if (lesseeId != null) {
            stmt.bindLong(4, lesseeId);
        }
 
        Integer entranceOpen = entity.getEntranceOpen();
        if (entranceOpen != null) {
            stmt.bindLong(5, entranceOpen);
        }
 
        Integer entranceClose = entity.getEntranceClose();
        if (entranceClose != null) {
            stmt.bindLong(6, entranceClose);
        }
 
        String fingerprintAddress = entity.getFingerprintAddress();
        if (fingerprintAddress != null) {
            stmt.bindString(7, fingerprintAddress);
        }
 
        String vcrIp = entity.getVcrIp();
        if (vcrIp != null) {
            stmt.bindString(8, vcrIp);
        }
 
        Integer vcrPort = entity.getVcrPort();
        if (vcrPort != null) {
            stmt.bindLong(9, vcrPort);
        }
 
        String vcrUsername = entity.getVcrUsername();
        if (vcrUsername != null) {
            stmt.bindString(10, vcrUsername);
        }
 
        String vcrPassword = entity.getVcrPassword();
        if (vcrPassword != null) {
            stmt.bindString(11, vcrPassword);
        }
 
        String vcrPrimaryAddress = entity.getVcrPrimaryAddress();
        if (vcrPrimaryAddress != null) {
            stmt.bindString(12, vcrPrimaryAddress);
        }
 
        String rfidIp = entity.getRfidIp();
        if (rfidIp != null) {
            stmt.bindString(13, rfidIp);
        }
 
        Integer rfidPort = entity.getRfidPort();
        if (rfidPort != null) {
            stmt.bindLong(14, rfidPort);
        }
 
        String printSerialName = entity.getPrintSerialName();
        if (printSerialName != null) {
            stmt.bindString(15, printSerialName);
        }
 
        String printBautRate = entity.getPrintBautRate();
        if (printBautRate != null) {
            stmt.bindString(16, printBautRate);
        }
 
        String lightSerialName = entity.getLightSerialName();
        if (lightSerialName != null) {
            stmt.bindString(17, lightSerialName);
        }
 
        String lightBautRate = entity.getLightBautRate();
        if (lightBautRate != null) {
            stmt.bindString(18, lightBautRate);
        }
 
        String entranceSerialName = entity.getEntranceSerialName();
        if (entranceSerialName != null) {
            stmt.bindString(19, entranceSerialName);
        }
 
        String entranceBautRate = entity.getEntranceBautRate();
        if (entranceBautRate != null) {
            stmt.bindString(20, entranceBautRate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoreHouseAioConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long storeHouseId = entity.getStoreHouseId();
        if (storeHouseId != null) {
            stmt.bindLong(2, storeHouseId);
        }
 
        String storeHouseName = entity.getStoreHouseName();
        if (storeHouseName != null) {
            stmt.bindString(3, storeHouseName);
        }
 
        Long lesseeId = entity.getLesseeId();
        if (lesseeId != null) {
            stmt.bindLong(4, lesseeId);
        }
 
        Integer entranceOpen = entity.getEntranceOpen();
        if (entranceOpen != null) {
            stmt.bindLong(5, entranceOpen);
        }
 
        Integer entranceClose = entity.getEntranceClose();
        if (entranceClose != null) {
            stmt.bindLong(6, entranceClose);
        }
 
        String fingerprintAddress = entity.getFingerprintAddress();
        if (fingerprintAddress != null) {
            stmt.bindString(7, fingerprintAddress);
        }
 
        String vcrIp = entity.getVcrIp();
        if (vcrIp != null) {
            stmt.bindString(8, vcrIp);
        }
 
        Integer vcrPort = entity.getVcrPort();
        if (vcrPort != null) {
            stmt.bindLong(9, vcrPort);
        }
 
        String vcrUsername = entity.getVcrUsername();
        if (vcrUsername != null) {
            stmt.bindString(10, vcrUsername);
        }
 
        String vcrPassword = entity.getVcrPassword();
        if (vcrPassword != null) {
            stmt.bindString(11, vcrPassword);
        }
 
        String vcrPrimaryAddress = entity.getVcrPrimaryAddress();
        if (vcrPrimaryAddress != null) {
            stmt.bindString(12, vcrPrimaryAddress);
        }
 
        String rfidIp = entity.getRfidIp();
        if (rfidIp != null) {
            stmt.bindString(13, rfidIp);
        }
 
        Integer rfidPort = entity.getRfidPort();
        if (rfidPort != null) {
            stmt.bindLong(14, rfidPort);
        }
 
        String printSerialName = entity.getPrintSerialName();
        if (printSerialName != null) {
            stmt.bindString(15, printSerialName);
        }
 
        String printBautRate = entity.getPrintBautRate();
        if (printBautRate != null) {
            stmt.bindString(16, printBautRate);
        }
 
        String lightSerialName = entity.getLightSerialName();
        if (lightSerialName != null) {
            stmt.bindString(17, lightSerialName);
        }
 
        String lightBautRate = entity.getLightBautRate();
        if (lightBautRate != null) {
            stmt.bindString(18, lightBautRate);
        }
 
        String entranceSerialName = entity.getEntranceSerialName();
        if (entranceSerialName != null) {
            stmt.bindString(19, entranceSerialName);
        }
 
        String entranceBautRate = entity.getEntranceBautRate();
        if (entranceBautRate != null) {
            stmt.bindString(20, entranceBautRate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StoreHouseAioConfig readEntity(Cursor cursor, int offset) {
        StoreHouseAioConfig entity = new StoreHouseAioConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // storeHouseId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // storeHouseName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // lesseeId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // entranceOpen
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // entranceClose
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fingerprintAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vcrIp
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // vcrPort
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // vcrUsername
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vcrPassword
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // vcrPrimaryAddress
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // rfidIp
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // rfidPort
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // printSerialName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // printBautRate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // lightSerialName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // lightBautRate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // entranceSerialName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // entranceBautRate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoreHouseAioConfig entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStoreHouseId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStoreHouseName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLesseeId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEntranceOpen(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEntranceClose(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFingerprintAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVcrIp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVcrPort(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setVcrUsername(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVcrPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVcrPrimaryAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRfidIp(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRfidPort(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setPrintSerialName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPrintBautRate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLightSerialName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLightBautRate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEntranceSerialName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEntranceBautRate(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StoreHouseAioConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StoreHouseAioConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StoreHouseAioConfig entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
